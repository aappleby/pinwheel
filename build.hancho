import hancho

################################################################################

def chparams(c):
  result = []
  for key, val in c.items():
    if isinstance(val, str):
      val = f"\"{val}\""
    result.append(f"chparam -set {key} {val} {{top}};")
  return result

yosys = hancho.Command(
  desc = "Run yosys on {rel(in_sv)}",
  command = "yosys -q -p 'read_verilog -defer {join_prefix('-I', includes)} -sv {rel(in_sv)}; dump; {chparams(params)} synth_ice40 -json {rel(out_json)};'",
  in_sv = None,
  out_json = "{swap_ext(in_sv, '.json')}",
  params = {},
  chparams = chparams,
  includes = [],
)

nextpnr = hancho.Command(
  desc    = "Run nextpnr-ice40 on {rel(in_json)}",
  command = "nextpnr-ice40 {flags} -q --json {rel(in_json)} --pcf {pcf} --{chip} --package {package}  --asc {rel(out_asc)}",
  in_json = None,
  out_asc = "{swap_ext(in_json, '.asc')}",
  flags   = "",
  pcf     = None,
  chip    = None,
  package = None,
)

icepack = hancho.Command(
  desc = "Run icepack on {rel(in_asc)}",
  command = "icepack {rel(in_asc)} {rel(out_bin)}",
  in_asc = None,
  out_bin = "{swap_ext(in_asc, '.bin')}",
)

iceprog = hancho.Command(
  desc = "Run iceprog on {rel(in_bin)}",
  command = "iceprog -S {rel(in_bin)}",
)

################################################################################

synth = hancho.Command(
  desc = "Synth {rel(in_sv)}",
  command = [
    "yosys -q -p 'read_verilog -defer {join_prefix('-I', includes)} -sv {rel(in_sv)}; dump; {chparams(params)} synth_ice40 -json {rel(out_json)};'",
    "nextpnr-ice40 {flags} -q --json {rel(out_json)} --pcf {pcf} --{chip} --package {package}  --asc {rel(out_asc)}",
    "icepack {rel(out_asc)} {rel(out_bin)}",
  ],
  in_sv    = None,
  out_json = "{swap_ext(in_sv, '.json')}",
  out_asc  = "{swap_ext(in_sv, '.asc')}",
  out_bin  = "{swap_ext(in_sv, '.bin')}",
  params   = {},
  chparams = chparams,
  includes = [],
  flags    = "",
  pcf      = None,
  chip     = None,
  package  = None,
)

################################################################################

#def call_synth(*, in_top, pcf, chip, package, includes = [], **kwargs):
#  top_json = yosys(
#    in_sv    = in_top,
#    includes = includes,
#  )
#
#  top_asc = nextpnr(
#    in_json  = top_json.promise("out_json"),
#    chip     = chip,
#    package  = package,
#    pcf      = pcf,
#  )
#
#  top_bin = icepack(
#    in_asc  = top_asc.promise("out_asc"),
#  )
#
#  return top_bin
#
#
#synth = hancho.Command(
#  call = call_synth
#)


#call_synth(
#  in_top = "top_icebreaker.v",
#  pcf = "top_icebreaker.pcf",
#  chip = "up5k",
#  package = "sg48",
#)
#
#call_synth(
#  in_top = "top_hx8k.v",
#  pcf = "top_hx8k.pcf",
#  chip = "hx8k",
#  package = "ct256",
#)

synth(
  in_sv = "top_icebreaker.v",
  pcf = "top_icebreaker.pcf",
  chip = "up5k",
  package = "sg48",
)

synth(
  in_sv = "top_hx8k.v",
  pcf = "top_hx8k.pcf",
  chip = "hx8k",
  package = "ct256",
)

################################################################################

"""
from functools import *

# A normal function
def add(foo, *args, a, b, c, **kwargs):
  print(foo)
  print(args)
  print(kwargs)
  return 100 * a + 10 * b + c

add_part = partial(add, c = 2)
add_part = partial(add_part, b = 1)

add_part = partial(add_part, jskdlkfsjf = "skdjflskj")
add_part = partial(add_part, snarp = "riuiiriri")
add_part = partial(add_part, 1)
add_part = partial(add_part, "narp")
add_part = partial(add_part, a = 3)

# Calling partial function
print(add_part())


import inspect

def args_to_config():
    frame = inspect.currentframe().f_back
    keys, varargs, keywords, values = inspect.getargvalues(frame)

    print("----------")
    print(f"keys {keys}")
    print(f"varargs {varargs}")
    print(f"keywords {keywords}")
    print(f"values {values}")

    args   = values.pop(varargs)  if varargs is not None  else None
    kwargs = values.pop(keywords) if keywords is not None else None

    print("----------")

    print(f"keys {keys}")
    print(f"varargs {varargs}")
    print(f"keywords {keywords}")
    print(f"values {values}")
    print(f"args {args}")
    print(f"kwargs {kwargs}")
    print("----------")

    values.update(kwargs)
    return hancho.Config(**values)


def call_synth2(*, in_top, pcf, chip, package = "cloaca", includes = [], **kwargs):
  return args_to_config()

d = call_synth2(
  in_top = "asdf",
  pcf = "askjdf.pcf",
  chip = "up5k",
  **hancho.Config(foo = 1),
)

print(d)

s = inspect.signature(call_synth2)
for p in s.parameters.items():
  print(p[1].kind)

#print(s.parameters)


#iceprog(
#  name = "top_prog",
#  in_bin = top_bin.promise("out_bin")
#)
"""

################################################################################
