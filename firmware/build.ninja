################################################################################
# Rules

rule compile_cpp
  command = riscv64-unknown-elf-gcc -Os -mabi=ilp32 -march=rv32i -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule compile_s
  command = riscv64-unknown-elf-gcc -mabi=ilp32 -march=rv32i -c ${in} -o ${out}

rule link
  command = riscv64-unknown-elf-gcc -static -mabi=ilp32 -march=rv32i -nostdlib -nostartfiles -Wl,-T hello.ld ${in} -o ${out} -lgcc

################################################################################
# Compile bin/pinwheel

build obj/hello.cpp.o: compile_cpp hello.cpp
build bin/hello:       link obj/hello.cpp.o | hello.ld










# SRCS=$(wildcard *.S)
# OBJS=$(SRCS:.S=.o)
# ELFS=$(SRCS:.S=.elf)
# BINS=$(SRCS:.S=.text.vh) $(SRCS:.S=.data.vh)
#
# all: ${BINS}
#
# %.o: %.S test_macros.h riscv_test.h
# 	riscv64-unknown-elf-gcc -c -mabi=ilp32 -march=rv32i -o $@ $<
#
# %.elf: %.o
# 	riscv64-unknown-elf-ld -Tlink.ld -melf32lriscv $< -o $@
#
# %.text.bin: %.elf
# 	riscv64-unknown-elf-objcopy -O binary $< $@ -j .init -j .text --change-addresses -0x400000
#
# %.data.bin: %.elf
# 	riscv64-unknown-elf-objcopy -O binary $< $@ -j .data -j .eh_frame -j .fini_array -j .init_array --change-addresses -0x80000000
#
# %.vh: %.bin
# 	srec_cat $< -binary -byte-swap 4 -O $@ -VMem 32
#
# clean:
# 	rm -f ${OBJS} ${ELFS} ${BINS}


#rule metron
#  command = bin/metron -q -v -r ${src_dir} -o ${dst_dir} -s ${src_top}
#rule verilator
#  command = verilator ${includes} --cc ${src_top} -Mdir ${dst_dir}
#rule make
#  command = make --quiet -C ${dst_dir} -f ${makefile} > /dev/null
#rule run_test
#  command = ${in} | grep "All tests pass" && touch ${out}
#rule console
#  command = ${in}
#  pool = console
#rule iverilog
#  command = iverilog -g2012 ${defines} ${includes} ${in} -o ${out}
#rule yosys
#  command = yosys -q -p 'read_verilog ${includes} -sv ${in}; dump; $
#      synth_ice40 -json ${out};'
#rule nextpnr-ice40
#  command = nextpnr-ice40 -q --${chip} --package ${package} --json ${in} $
#      --asc ${out} --pcf ${pcf}
#rule icepack
#  command = icepack ${in} ${out}
#rule command
#  command = ${command}
