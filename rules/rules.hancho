
base = hancho.extend(
  toolchain  = "x86_64-linux-gnu",
  build_type = "-g -O0",
  warnings   = "-Wunused-variable -Werror",
  defines    = "-DCONFIG_DEBUG",
  cpp_std    = "-std=gnu++2a",
  includes   = "-I. -Isymlinks -Isymlinks/metrolib -Isymlinks/metron ",
)

check_cpp = base.command(
  desc        = "Syntax checking {source_files}",
  command     = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {source_files} && touch {build_files}",
  build_files = "{swap_ext(source_files, '.ok')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

compile_cpp = base.command(
  desc        = "Compiling C++ {source_files} => {build_files}",
  command     = "{toolchain}-g++ -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {source_files} -o {build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

compile_c = base.command(
  desc        = "Compiling C {source_files} => {build_files}",
  command     = "{toolchain}-gcc -MMD {warnings} {build_type} {includes} {defines} -c {source_files} -o {build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

link_c_lib = base.command(
  desc      = "Bundling {build_files}",
  command   = "ar rcs {build_files} {source_files}",
)

link_c_bin  = base.command(
  desc      = "Linking {build_files}",
  command   = "{toolchain}-g++ -g -Wl,--as-needed -Wl,--no-undefined -Wl,--start-group {source_files} {sys_libs} -Wl,--end-group -o {build_files}",
)

def cpp_binary(source_files, build_files, **kwargs):
  objs = [compile_cpp(file, **kwargs) for file in source_files]
  return link_c_bin(objs, build_files, **kwargs)

def cpp_lib(source_files, build_files, **kwargs):
  objs = [compile_cpp(file, **kwargs) for file in source_files]
  return link_c_lib(objs, build_files, **kwargs)

def c_lib(source_files, build_files, **kwargs):
  objs = [compile_c(file, **kwargs) for file in source_files]
  return link_c_lib(objs, build_files, **kwargs)



rv_base = hancho.extend(
  arch         = "-march=rv32i -mabi=ilp32 -mstrict-align",
)

rv_compile = rv_base.command(
  command   = "riscv64-unknown-elf-gcc {opts} -c {source_files} -o {build_files}",
  opts      = "{arch} -g -Os -std=gnu++2a  -MMD",
  build_files = "{swap_ext(source_files, '.o')}",
  depfile   = "{swap_ext(build_files, '.d')}",
)

rv_link = rv_base.command(
  command      = "riscv64-unknown-elf-gcc {source_files} {opts} -o {build_files}",
  opts         = "{arch} -nostdlib -nostartfiles -Wl,-T {linkerscript} -lgcc",
  build_deps   = "{linkerscript}",
  linkerscript = "{root_dir}/pinwheel/tools/pinwheel.ld",
)


metron = hancho.command(
  command   = "symlinks/metron/build/metron/metron -q -v -e -c {source_files} -o {build_files}",
  depfile   = "{swap_ext(source_files, '.d')}",
  build_files = "{swap_ext(source_files, '.sv')}",
)

sv2v = hancho.command(
  command = "symlinks/sv2v/bin/sv2v {includes} {source_files} -w {build_files}",
  build_files = "{swap_ext(source_files, '.sv.2.v')}",
)
