#pragma once
#include "metron_tools.h"
#include "constants.h"

static const int OP_LOAD    = 0b00000;
static const int OP_ALUI    = 0b00100;
static const int OP_AUIPC   = 0b00101;
static const int OP_STORE   = 0b01000;
static const int OP_ALU     = 0b01100;
static const int OP_LUI     = 0b01101;
static const int OP_BRANCH  = 0b11000;
static const int OP_JALR    = 0b11001;
static const int OP_JAL     = 0b11011;
static const int OP_SYS     = 0b11100;

inline const char* op_id_to_name(int op_id) {
  switch(op_id) {
    case OP_ALU:    return "OP_ALU   ";
    case OP_ALUI:   return "OP_ALUI  ";
    case OP_LOAD:   return "OP_LOAD  ";
    case OP_STORE:  return "OP_STORE ";
    case OP_BRANCH: return "OP_BRANCH";
    case OP_JAL:    return "OP_JAL   ";
    case OP_JALR:   return "OP_JALR  ";
    case OP_LUI:    return "OP_LUI   ";
    case OP_AUIPC:  return "OP_AUIPC ";
    default:        return "???      ";
  }
}

//------------------------------------------------------------------------------

struct registers_p0 {
  logic<5>  hart;
  logic<32> pc;
};

struct registers_p1 {
  logic<5>  hart;
  logic<32> pc;
  logic<32> insn;
};

struct registers_p2 {
  logic<5>  hart;
  logic<32> pc;
  logic<32> insn;

  logic<5>  align;
  logic<32> rbus_wdata;
};

//------------------------------------------------------------------------------

class Pinwheel {
 public:
  void tock(logic<1> reset) {
    tick(reset);
  }

  uint32_t code_mem[16384];  // Cores share a 4K ROM
  uint32_t data_mem[16384];  // Cores share a 4K RAM
  uint32_t regfile[32][32]; // Cores have their own register file

  registers_p0 reg_p0;
  registers_p1 reg_p1;
  registers_p2 reg_p2;

  logic<5>  rbus_raddr1;
  logic<5>  rbus_raddr2;
  logic<5>  rbus_waddr;
  logic<32> rbus_wdata;

  logic<32> dbus_addr;
  logic<32> dbus_wdata;
  logic<4>  dbus_mask;

  void dump() {
    if (reg_p0.hart == 0) {
      //printf("h%dp0: 0x%08x\n", (int)reg_p0.hart, (int)reg_p0.pc);
    }
    if (reg_p1.hart == 0) {
      //printf("h%dp1: 0x%08x %s inst 0x%08x imm 0x%08x\n", (int)reg_p1.hart, (int)reg_p1.pc, op_id_to_name(reg_p1.op), (uint32_t)reg_p1.insn, (uint32_t)reg_p1.imm);
    }
    if (reg_p2.hart == 0) {
      //printf("h%dp2: 0x%08x %s alu 0x%08x\n", (int)reg_p2.hart, (int)reg_p2.pc, op_id_to_name(reg_p2.op), (uint32_t)reg_p2.alu);
    }
  }

  //----------------------------------------

  void reset() {
    std::string s;
    value_plusargs("text_file=%s", s);
    readmemh(s, code_mem);

    value_plusargs("data_file=%s", s);
    readmemh(s, data_mem);

    memset(regfile, 0, sizeof(regfile));

    reg_p0.hart   = 0;
    reg_p0.pc     = 0;

    reg_p1.hart   = 0;
    reg_p1.pc     = 0;
    reg_p1.insn   = 0;

    reg_p2.hart   = 1;
    reg_p2.pc     = -4;
    reg_p2.insn   = 0;

    rbus_raddr1 = 0;
    rbus_raddr2 = 0;
    rbus_waddr  = 0;
    rbus_wdata  = 0;

    dbus_addr  = 0;
    dbus_wdata = 0;
    dbus_mask  = 0;
  }

  //--------------------------------------------------------------------------------

  void tick(logic<1> reset_in) {
    if (reset_in) {
      reset();
      return;
    }

    logic<32> pbus_data = code_mem[b10(reg_p0.pc, 2)];
    logic<32> dbus_data = data_mem[b10(dbus_addr, 2)];
    if (dbus_mask) {
      if (dbus_addr != 0x40000000) {
        if (dbus_mask[0]) dbus_data = (dbus_data & 0xFFFFFF00) | (dbus_wdata & 0x000000FF);
        if (dbus_mask[1]) dbus_data = (dbus_data & 0xFFFF00FF) | (dbus_wdata & 0x0000FF00);
        if (dbus_mask[2]) dbus_data = (dbus_data & 0xFF00FFFF) | (dbus_wdata & 0x00FF0000);
        if (dbus_mask[3]) dbus_data = (dbus_data & 0x00FFFFFF) | (dbus_wdata & 0xFF000000);
        data_mem[b10(dbus_addr, 2)] = dbus_data;
      }
    }

    // Regfile
    logic<32> ra = regfile[reg_p1.hart][rbus_raddr1];
    logic<32> rb = regfile[reg_p1.hart][rbus_raddr2];
    if (rbus_waddr) {
      regfile[reg_p0.hart][rbus_waddr] = rbus_wdata;
    }

    auto old_reg_p0 = reg_p0;
    auto old_reg_p1 = reg_p1;
    auto old_reg_p2 = reg_p2;

    rbus_raddr1 = b5(pbus_data, 15);
    rbus_raddr2 = b5(pbus_data, 20);

    reg_p1.hart = old_reg_p0.hart;
    reg_p1.pc   = old_reg_p0.pc;
    reg_p1.insn = pbus_data;

    {
      logic<32> insn = old_reg_p1.insn;
      logic<5>  op = b5(insn, 2);
      logic<3>  f3 = b3(insn, 12);
      logic<32> imm_b = cat(dup<20>(insn[31]), insn[7], b6(insn, 25), b4(insn, 8), b1(0));
      logic<32> imm_i = cat(dup<21>(insn[31]), b6(insn, 25), b5(insn, 20));
      logic<32> imm_j = cat(dup<12>(insn[31]), b8(insn, 12), insn[20], b6(insn, 25), b4(insn, 21), b1(0));
      logic<32> imm_u = cat(insn[31], b11(insn, 20), b8(insn, 12), b12(0));
      logic<32> imm_s = cat(dup<21>(insn[31]), b6(insn, 25), b5(insn, 7));

      // Data bus driver
      logic<32> addr = ra + ((op == OP_STORE) ? imm_s : imm_i);

      logic<2>  align = b2(addr);
      dbus_addr  = addr;
      dbus_wdata = rb << (8 * align);
      dbus_mask  = 0b0000;

      if (op == OP_STORE) {
        logic<3> f3 = b3(insn, 12);
        if      (f3 == 0) dbus_mask = 0b0001 << align;
        else if (f3 == 1) dbus_mask = 0b0011 << align;
        else if (f3 == 2) dbus_mask = 0b1111;
        else              dbus_mask = 0b0000;
      }

      if (!old_reg_p1.hart) {
        dbus_addr  = 0;
        dbus_wdata = 0;
        dbus_mask  = 0;
      }

      // ALU
      logic<1>  alu_alt = b1(old_reg_p1.insn, 30);
      logic<32> alu_a  = ra;
      logic<32> alu_b  = rb;
      logic<3>  alu_op = f3;

      switch(op) {
        case OP_ALU:    alu_op = f3;        alu_a = ra;        alu_b = (f3 == 0 && alu_alt) ? b32(-rb) : rb; break;
        case OP_ALUI:   alu_op = f3;        alu_a = ra;        alu_b = imm_i; break;
        case OP_LOAD:   alu_op = f3;        alu_a = ra;        alu_b = rb;  break;
        case OP_STORE:  alu_op = f3;        alu_a = ra;        alu_b = rb;  break;
        case OP_BRANCH: alu_op = f3;        alu_a = ra;        alu_b = rb;  break;
        case OP_JAL:    alu_op = 0;         alu_a = old_reg_p1.pc; alu_b = b32(4);     break;
        case OP_JALR:   alu_op = 0;         alu_a = old_reg_p1.pc; alu_b = b32(4);     break;
        case OP_LUI:    alu_op = 0;         alu_a = 0;         alu_b = imm_u; break;
        case OP_AUIPC:  alu_op = 0;         alu_a = old_reg_p1.pc; alu_b = imm_u; break;
      }

      logic<1> bit = (alu_op == 5) && alu_alt ? alu_a[31] : b1(0);

      logic<32> sl = alu_a;
      if (alu_b[4]) sl = cat(b16(sl, 0), dup<16>(bit));
      if (alu_b[3]) sl = cat(b24(sl, 0), dup< 8>(bit));
      if (alu_b[2]) sl = cat(b28(sl, 0), dup< 4>(bit));
      if (alu_b[1]) sl = cat(b30(sl, 0), dup< 2>(bit));
      if (alu_b[0]) sl = cat(b31(sl, 0), dup< 1>(bit));

      logic<32> sr = alu_a;
      if (alu_b[4]) sr = cat(dup<16>(bit), b16(sr, 16));
      if (alu_b[3]) sr = cat(dup< 8>(bit), b24(sr,  8));
      if (alu_b[2]) sr = cat(dup< 4>(bit), b28(sr,  4));
      if (alu_b[1]) sr = cat(dup< 2>(bit), b30(sr,  2));
      if (alu_b[0]) sr = cat(dup< 1>(bit), b31(sr,  1));

      logic<32> alu_out;
      logic<32> pc_next = old_reg_p1.pc + b32(4);

      switch (alu_op) {
        case 0: alu_out = alu_a + alu_b;                 break;
        case 1: alu_out = sl;                            break;
        case 2: alu_out = signed(alu_a) < signed(alu_b); break;
        case 3: alu_out = alu_a < alu_b;                 break;
        case 4: alu_out = alu_a ^ alu_b;                 break;
        case 5: alu_out = sr;                            break;
        case 6: alu_out = alu_a | alu_b;                 break;
        case 7: alu_out = alu_a & alu_b;                 break;
      }

      // jump_rel
      logic<1> eq  = ra == rb;
      logic<1> slt = signed(ra) < signed(rb);
      logic<1> ult = ra < rb;
      logic<1> jump_rel = 0;
      if (op == OP_BRANCH) {
        switch (f3) {
          case 0: jump_rel =   eq; break;
          case 1: jump_rel =  !eq; break;
          case 2: jump_rel =   eq; break;
          case 3: jump_rel =  !eq; break;
          case 4: jump_rel =  slt; break;
          case 5: jump_rel = !slt; break;
          case 6: jump_rel =  ult; break;
          case 7: jump_rel = !ult; break;
        }
      }
      else if (op == OP_JAL)  jump_rel = 1;
      else if (op == OP_JALR) jump_rel = 1;

      // Next PC
      if (op == OP_BRANCH && jump_rel) { pc_next = old_reg_p1.pc + imm_b; }
      if (op == OP_JAL)                { pc_next = old_reg_p1.pc + imm_j; }
      if (op == OP_JALR)               { pc_next = ra + imm_i; }

      reg_p2.hart       = old_reg_p1.hart;
      reg_p2.pc         = pc_next;
      reg_p2.insn       = old_reg_p1.insn;
      reg_p2.align      = b2(dbus_addr);
      reg_p2.rbus_wdata = alu_out;
    }

    {
      logic<5>  p2_op = b5(old_reg_p2.insn, 2);
      logic<3>  p2_f3 = b3(old_reg_p2.insn, 12);

      // Writeback
      logic<32> unpacked; // Unpack byte/word from memory dword
      switch (p2_f3) {
        case 0: unpacked = sign_extend<32>(b8(dbus_data, 8 * old_reg_p2.align)); break;
        case 1: unpacked = sign_extend<32>(b16(dbus_data, 8 * old_reg_p2.align)); break;
        case 2: unpacked = dbus_data; break;
        case 3: unpacked = dbus_data; break;
        case 4: unpacked = b8(dbus_data, 8 * old_reg_p2.align); break;
        case 5: unpacked = b16(dbus_data, 8 * old_reg_p2.align); break;
        case 6: unpacked = dbus_data; break;
        case 7: unpacked = dbus_data; break;
      }

      rbus_wdata = p2_op == OP_LOAD ? unpacked : old_reg_p2.rbus_wdata;
      rbus_waddr = b5(old_reg_p2.insn, 7);
      if (p2_op == OP_STORE)  rbus_waddr = 0;
      if (p2_op == OP_BRANCH) rbus_waddr = 0;

      // Next PC
      reg_p0.hart = old_reg_p2.hart;
      reg_p0.pc   = old_reg_p2.pc;
    }
  }
};
